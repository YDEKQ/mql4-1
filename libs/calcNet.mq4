

int AttrNum = 6;
int AttrSize = 7;
int NodeNum = 8;
int NodeSize = 9;
double SigmoidWeights[8][7] = { 
    -3.913976787546473,-0.2313599551518332,0.5236001432677418,-0.4845809864446499,-1.4083950307732795,1.287376750722083,-0.5264231575656667,
    -3.913976787546436,-0.23135995515183705,0.5236001432677462,-0.48458098644462266,-1.4083950307733186,1.2873767507221023,-0.526423157565667,
    -6.929065365165638,12.09869113513589,0.9821355966782208,-7.123050813541049,-8.730448090297797,-1.5568348236624445,16.08873332916096, 
    -4.005582105006674,-0.48268529458389026,0.5626616568413977,-1.3371850422812415,-0.5757486224737444,1.129704995293283,-0.6140386949937038, 
    -5.605588993709541,-2.954917805544663,-0.7712750903894914,1.1371155281179022,-5.883052583755473,0.7370720278286179,8.745184054949203, 
    -6.426473639549075,0.5333329712155874,1.0485432353850368,-0.13458646385645023,-4.6493901907297435,-2.717720834103987,4.411246020941945, 
    -2.364890943711836,6.083368785427239,0.8374520085244727,-2.5463126598822807,-3.532514512670216,-1.127996080480351,9.828515657681725, 
    -5.934156796041374,4.166297964135294,-0.1983193188529508,3.715392584800632,0.6432877579595192,0.5086345706395629,-5.715624111817505 
};

double LinearWeights[] = {0.23639506168060795,-2.1963449552343928,-2.1963449552343364,-1.6983582933485568,-1.9425908418881845,1.623053239662827,-1.4992441114649555,2.1400374449877964,-0.8288289170627235};
double Nodes[9];

//double e = 2.71828183;

double ex = 0.0;
double sigmod(double x)
{
   ex = 1/(1+MathExp(-x));
}

double inputs[6];
int i = 0;
int j = 0;
double score = 0.0;
    
double calcNet()
{

    for (i = 0; i < AttrNum; i++)
    {
        inputs[i] = inputs[i]/50; //normalize
        if (inputs[i] > 1) {
            inputs[i] = 1;
        } else if (inputs[i] < -1) {
            inputs[i] = -1;
        }
    }
    Nodes[0] = 1;
    for(i = 1; i <= NodeNum; i++)
    {
        Nodes[i] = SigmoidWeights[i-1][0];
        //printf("Node_%d: %f\n", i,  Nodes[i]);
        for (j = 1; j <= AttrNum; j++)
        {
            Nodes[i] = Nodes[i] + inputs[j-1] * SigmoidWeights[i-1][j];
        }
        //printf("Node %d: %f\n", i,  Nodes[i]);
        sigmod(Nodes[i]);
        Nodes[i] = ex;
        
        //printf("Node: %f\n", Nodes[i]);
    }
    score = 0.0;
    for (i = 0; i <= NodeNum; i++)
    {
        score = score + Nodes[i] * LinearWeights[i];
    }

    //return score;
}


int init()
{
   
   calcNet();
   Alert(score, " should be ",0.2992);
}

int start()
{
}
